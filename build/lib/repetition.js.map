{"version":3,"sources":["../../src/lib/repetition.js"],"names":["dayMS","getOccurencesOfRepetition","event","start","end","startDate","Date","endDate","repeats","every","day","numOfDays","week","daysOfWeek","getDay","month","daysOfMonth","getDate","duration","dates","Array","prototype","concat","apply","map","num","current","valueOf","s","setFullYear","getFullYear","setMonth","getMonth","setDate","mod","out","push","add","date","year","setYear","getYear","occurences","toISOString","split"],"mappings":"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","file":"repetition.js","sourcesContent":["// define the schema for repeating events\n/*\n  event.repeats = null; // single instance event\n  event.repeats = {\n    every: {\n      // repeats every A days and every B days from first instance\n      numOfDays: [A, B, ...],\n      // repeats every Ath and Bth day of the week\n      daysOfWeek: [A, B, ...],\n      // repeats every Ath and Bth day of the month\n      daysOfMonth: [A, B, ...],\n      // repeats every day at startDate.time\n      // aliased to { numOfDays = [1] }\n      day: true,\n      // repeats every week on startDate.dayOfWeek\n      // aliased to { daysOfWeek = [startDate.dayOfWeek] }\n      // equal to { numOfDays = [7] }\n      week: true,\n      // repeats every month on startDate.dayOfMonth\n      // aliased to { daysOfMonth = [startDate.dayOfMonth] }\n      month: true,\n      // repeats every year on startDate.dayOfMonth of startDate.month\n      year: true,\n    },\n    endDate, // cut-off date for event occurences\n  };\n  event.startDate; // first occurrence of event on which repetition is based\n  event.endDate; // end of the first occurrence\n*/\n\nconst dayMS = 24 * 60 * 60 * 1000;\n\n// get occurences of `event` over the interval from `start` to `end`\nconst getOccurencesOfRepetition = (event, start, end) => {\n  const startDate = new Date(event.startDate);\n  const endDate = event.repeats.endDate;\n  const every = event.repeats.every;\n  if (every.day) {\n    every.numOfDays = [1];\n  } else if (every.week) {\n    every.daysOfWeek = [startDate.getDay()];\n  } else if (every.month) {\n    every.daysOfMonth = [startDate.getDate()];\n  }\n\n  const duration = event.endDate - event.startDate;\n  let dates = [];\n  if (every.numOfDays) {\n    dates = Array.prototype.concat.apply([], every.numOfDays.map((num) => {\n      // first occurrence after start\n      const current = new Date(startDate.valueOf());\n      if (current < start) {\n        const s = new Date(start);\n        current.setFullYear(s.getFullYear());\n        current.setMonth(s.getMonth());\n        current.setDate(s.getDate());\n\n        if (current < start) {\n          current.setDate(current.getDate() + 1);\n        }\n        const mod = ((current - startDate) % num) * dayMS;\n        if (mod !== 0) {\n          current.setDate(((current.getDate() + num) - mod) / dayMS);\n        }\n      }\n\n      const out = [];\n      while (current < end && (!endDate || current < endDate)) {\n        out.push(current.valueOf());\n        current.setDate(current.getDate() + num);\n      }\n      return out;\n    }));\n  } else if (every.daysOfWeek) {\n    dates = Array.prototype.concat.apply([], every.daysOfWeek.map((day) => {\n      // first occurrence after start\n      const current = new Date(startDate.valueOf());\n      if (current < start) {\n        const s = new Date(start);\n        current.setFullYear(s.getFullYear());\n        current.setMonth(s.getMonth());\n        current.setDate(s.getDate());\n\n        if (current < start) {\n          current.setDate(current.getDate() + 1);\n        }\n      }\n      if (current.getDay() !== day) {\n        let add = day - current.getDay();\n        if (add < 0) {\n          add += 7;\n        }\n        current.setDate(current.getDate() + add);\n      }\n\n      const out = [];\n      while (current < end && (!endDate || current < endDate)) {\n        out.push(current.valueOf());\n        current.setDate(current.getDate() + 7);\n      }\n      return out;\n    }));\n  } else if (every.daysOfMonth) {\n    dates = Array.prototype.concat.apply([], every.daysOfMonth.map((date) => {\n      // first occurrence after start\n      const current = new Date(startDate.valueOf());\n      if (current < start) {\n        const s = new Date(start);\n        current.setFullYear(s.getFullYear());\n        current.setMonth(s.getMonth());\n\n        if (current < start) {\n          current.setMonth(current.getMonth() + 1);\n        }\n      }\n      current.setDate(date);\n\n      const out = [];\n      while (current < end && (!endDate || current < endDate)) {\n        out.push(current.valueOf());\n        current.setMonth(current.getMonth() + 1);\n      }\n      return out;\n    }));\n  } else if (every.year) {\n    // first occurrence after start\n    const current = new Date(startDate.valueOf());\n    if (current < start) {\n      const s = new Date(start);\n      current.setFullYear(s.getFullYear());\n\n      if (current < start) {\n        current.setYear(current.getYear() + 1);\n      }\n    }\n\n    const out = [];\n    while (current < end && (!endDate || current < endDate)) {\n      out.push(current.valueOf());\n      current.setYear(current.getYear() + 1);\n    }\n    dates = out;\n  }\n\n  const occurences = dates.map(date => ({\n    ...event,\n    startDate: date,\n    endDate: date + duration,\n    day: (new Date(date)).toISOString().split('T')[0],\n  }));\n  return occurences;\n};\n\nexport { getOccurencesOfRepetition };\n"]}