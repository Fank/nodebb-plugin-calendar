{"version":3,"sources":["../../../src/lib/tests/formatDates.js"],"names":["lang","s","e","start","Date","st","date","toLocaleDateString","hours","getHours","mins","getMinutes","ampm","toLocaleTimeString","replace","end","en","minutes","forEach","x"],"mappings":"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","file":"formatDates.js","sourcesContent":["import assert from 'assert';\nimport { formatDates } from '../translatorModule';\n\nconst lang = 'en-us';\n\n[\n  // same day, same time, not allday\n  () => {\n    const s = 1465186294775;\n    const e = s + (1000 * 60 * 43) + (1000 * 60 * 60 * 2); // offset 2 hours 43 min\n\n    const start = new Date(s);\n\n    const st = {\n      date: start.toLocaleDateString(lang),\n      hours: start.getHours(),\n      mins: start.getMinutes(),\n      ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\n    };\n\n    assert(`${st.date}<br>${st.hours}:${st.mins} ${st.ampm}`, formatDates(s, e, false, lang));\n  },\n  // same day, time separation, not allday\n  () => {\n    const s = 1465186294775;\n    const e = s + (1000 * 60 * 43) + (1000 * 60 * 60 * 2); // offset 2 hours 43 min\n\n    const start = new Date(s);\n    const end = new Date(e);\n\n    const st = {\n      date: start.toLocaleDateString(lang),\n      hours: start.getHours(),\n      mins: start.getMinutes(),\n      ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\n    };\n\n    const en = {\n      hours: end.getHours(),\n      mins: end.getMinutes(),\n      ampm: end.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\n    };\n\n    assert(`${st.date}<br>${st.hours}:${st.mins} ${st.ampm} - ` +\n      `${en.hours}:${en.minutes} ${en.ampm}`, formatDates(s, e, false, lang));\n  },\n  // same day, time separation, allday\n  () => {\n    const s = 1465186294775;\n    const e = s + (1000 * 60 * 43) + (1000 * 60 * 60 * 2); // offset 2 hours 43 min\n\n    const start = new Date(s);\n\n    assert(`${start.toLocaleDateString(lang)}`, formatDates(s, e, true, lang));\n  },\n  // different day, not allday\n  () => {\n    const s = 1465186294775;\n    const e = s +\n      (1000 * 60 * 60 * 24) +\n      (1000 * 60 * 60 * 2) +\n      (1000 * 60 * 43); // offset 1 day 2 hours 43 min\n\n    const start = new Date(s);\n    const end = new Date(e);\n\n    const st = {\n      date: start.toLocaleDateString(lang),\n      hours: start.getHours(),\n      mins: start.getMinutes(),\n      ampm: start.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\n    };\n\n    const en = {\n      date: end.toLocaleDateString(lang),\n      hours: end.getHours(),\n      mins: end.getMinutes(),\n      ampm: end.toLocaleTimeString(lang).replace(/[^APM]/g, ''),\n    };\n\n    assert(`${st.date} ${st.hours}:${st.mins} ${st.ampm} - ` +\n      `${en.date} ${en.hours}:${en.minutes} ${en.ampm}`, formatDates(s, e, false, lang));\n  },\n  // different day, time separation, allday\n  () => {\n    const s = 1465186294775;\n    const e = s +\n      (1000 * 60 * 60 * 24) +\n      (1000 * 60 * 60 * 2) +\n      (1000 * 60 * 43); // offset 1 day 2 hours 43 min\n\n    const start = new Date(s);\n    const end = new Date(e);\n\n    assert(`${start.toLocaleDateString(lang)} - ${end.toLocaleDateString(lang)}`,\n      formatDates(s, e, true, lang));\n  },\n].forEach(x => x());\n"]}