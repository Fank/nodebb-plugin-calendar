{"version":3,"sources":["../../src/lib/reminders.js"],"names":["notifications","require","main","posts","meta","user","emailer","nconf","winston","p","promisify","createNotif","create","pushNotif","push","getPostFields","getUidsFromSet","sendEmail","send","getUserSettings","getSettings","getUserFields","emailNotification","uid","event","message","parseInt","config","disableEmailSubscriptions","all","pid","day","userData","userSettings","response","sendPostNotifications","parsed","responses","content","isEmail","subject","title","name","replace","site_title","username","userslug","url","get","base_url","notify","reminder","uids","mandatory","users","selection","yes","maybe","map","u","postData","notif","bodyShort","bodyLong","nid","tid","from","path","initNotifierDaemon","checkingInterval","verbose","Math","floor","lastEnd","Date","now","checkReminders","start","end","events","occurences","reduce","prev","max","reminders","repeats","filtered","find","r","remDate","startDate","Number","isFinite","filter","Boolean","daemon","asCallback","err","error","setTimeout"],"mappings":"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","file":"reminders.js","sourcesContent":["// import { fork } from 'child_process';\nimport Promise from 'bluebird';\nimport { getAll as getResponses, getUserResponse } from './responses';\nimport { getEventsEndingAfter, escapeEvent } from './event';\nimport { filterUidsByPid } from './privileges';\nimport { getOccurencesOfRepetition } from './repetition';\nimport { eventTemplate } from './templates';\nimport { getSetting } from './settings';\n\nconst notifications = require.main.require('./src/notifications');\nconst posts = require.main.require('./src/posts');\nconst meta = require.main.require('./src/meta');\nconst user = require.main.require('./src/user');\nconst emailer = require.main.require('./src/emailer');\nconst nconf = require.main.require('nconf');\nconst winston = require.main.require('winston');\n\nconst p = Promise.promisify;\n\nconst createNotif = p(notifications.create);\nconst pushNotif = p(notifications.push);\nconst getPostFields = p(posts.getPostFields);\nconst getUidsFromSet = p(user.getUidsFromSet);\nconst sendEmail = p(emailer.send);\nconst getUserSettings = p(user.getSettings);\nconst getUserFields = p(user.getUserFields);\n\nconst emailNotification = async ({ uid, event, message }) => {\n  if (parseInt(meta.config.disableEmailSubscriptions, 10) === 1) {\n    return;\n  }\n\n  const [userData, userSettings, response] = await Promise.all([\n    getUserFields(uid, ['username', 'userslug']),\n    getUserSettings(uid),\n    getUserResponse({ pid: event.pid, uid, day: event.day }),\n  ]);\n\n  if (userSettings.sendPostNotifications) {\n    const parsed = await escapeEvent(event);\n    parsed.responses = {\n      [uid]: response,\n    };\n\n    const content = eventTemplate({ event: parsed, uid, isEmail: true });\n\n    await sendEmail('notif_plugin_calendar_event_reminder', uid, {\n      pid: event.pid,\n      subject: `[${meta.config.title || 'NodeBB'}] ` +\n        `[[calendar:event_starting, ${message}, ${event.name}]]`,\n      content: content.replace(/\"\\/\\//g, '\"https://'),\n      site_title: meta.config.title || 'NodeBB',\n      username: userData.username,\n      userslug: userData.userslug,\n      url: `${nconf.get('url')}/post/${event.pid}`,\n      base_url: nconf.get('url'),\n    });\n  }\n};\n\nconst notify = async ({ event, reminder, message }) => {\n  let uids;\n\n  // if event is mandatory, notify all the users who can view it\n  if (event.mandatory) {\n    const all = await getUidsFromSet('users:joindate', 0, -1);\n    uids = await filterUidsByPid(all, event.pid);\n  } else {\n    let users;\n\n    // if reminder is for the event start\n    // notify 'maybe' and 'yes' responders\n    // otherwise, notify only 'yes' responders\n    if (reminder === 0) {\n      const responses = await getResponses({\n        pid: event.pid,\n        selection: ['yes', 'maybe'],\n      });\n      users = [...responses.yes, ...responses.maybe];\n    } else {\n      const responses = await getResponses({\n        pid: event.pid,\n        selection: ['yes'],\n      });\n      users = responses.yes;\n    }\n    uids = users.map(u => u.uid);\n  }\n\n  const postData = await getPostFields(event.pid, ['tid', 'content', 'title']);\n\n  const notif = await createNotif({\n    bodyShort: `[[calendar:event_starting, ${message}, ${event.name}]]`,\n    bodyLong: postData.content,\n    nid: `plugin-calendar:events:pid:${event.pid}:event_starting`,\n    pid: event.pid,\n    tid: postData.tid,\n    from: event.uid,\n    path: `/post/${event.pid}`,\n  });\n  await pushNotif(notif, uids);\n\n  await Promise.all(uids.map(uid =>\n    emailNotification({ uid, event, message, postData })\n  ));\n};\n\nconst initNotifierDaemon = async () => {\n  // ms between checking for reminders\n  // pulled from settings\n  let checkingInterval = await getSetting('checkingInterval');\n\n  winston.verbose(`Notifier Daemon initialized with\n    interval of ${Math.floor(checkingInterval / 1000)} seconds`);\n\n  let lastEnd = Date.now() + checkingInterval;\n\n  const checkReminders = async () => {\n    checkingInterval = await getSetting('checkingInterval');\n    // timespan we check is a checkingInterval in the future\n    // so as to avoid sending notifications too late\n    const start = lastEnd;\n    const end = Date.now() + checkingInterval;\n    lastEnd = end;\n\n    const events = await getEventsEndingAfter(start);\n\n    const occurences = events.reduce((prev, event) => {\n      const max = Math.max(0, ...event.reminders);\n      if (event.repeats) {\n        return [...prev, ...getOccurencesOfRepetition(event, start, end + max)];\n      }\n      return [...prev, event];\n    }, []);\n\n    const filtered = occurences\n      .map((event) => {\n        const reminder = [0, ...event.reminders].find((r) => {\n          const remDate = event.startDate - r;\n          return remDate > start && remDate <= end;\n        });\n        if (!Number.isFinite(reminder)) {\n          return null;\n        }\n        const message = `[[moment:time-in, ${event.startDate - start}]]`;\n        return { event, reminder, message };\n      })\n      .filter(Boolean);\n\n    await Promise.all(filtered.map(notify));\n  };\n\n  const daemon = () => {\n    checkReminders().asCallback((err) => {\n      if (err) {\n        winston.error(err);\n      }\n      setTimeout(daemon, checkingInterval);\n    });\n  };\n  daemon();\n};\n\nexport { initNotifierDaemon, notify };\n"]}