{"version":3,"sources":["../../src/lib/postSave.js"],"names":["plugins","require","main","topics","winston","p","promisify","fireHook","getTopicField","isMainPost","pid","tid","mainPid","parseInt","postSave","data","post","event","content","match","existed","message","verbose","invalid","replace","failed","failures","obj","reduce","val","failure","isMain","can","uid","name","escape","location","trim","description","postSaveCallback","cb","asCallback"],"mappings":"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","file":"postSave.js","sourcesContent":["import validator from 'validator';\nimport Promise from 'bluebird';\nimport parse, { inPost } from './parse';\nimport { canPostEvent } from './privileges';\nimport { deleteEvent, saveEvent, eventExists, getEvent } from './event';\nimport validateEvent from './validateEvent';\nimport { notify } from './reminders';\nimport { getSetting } from './settings';\n\nconst plugins = require.main.require('./src/plugins');\nconst topics = require.main.require('./src/topics');\nconst winston = require.main.require('winston');\n\nconst p = Promise.promisify;\n\nconst fireHook = p(plugins.fireHook);\nconst getTopicField = p(topics.getTopicField);\n\nconst isMainPost = async ({ pid, tid }) => {\n  const mainPid = await getTopicField(tid, 'mainPid');\n  return parseInt(mainPid, 10) === parseInt(pid, 10);\n};\n\nconst postSave = async (data) => {\n  const { post } = data;\n  let event = parse(post.content);\n\n  // delete event if no longer in post\n  if (!post.content.match(inPost)) {\n    const existed = await eventExists(post.pid);\n    if (existed) {\n      await notify({\n        event: await getEvent(post.pid),\n        message: '[[calendar:event_deleted]]',\n      });\n\n      await deleteEvent(post.pid);\n      winston.verbose(`[plugin-calendar] Event (pid:${post.pid}) deleted`);\n    }\n\n    return data;\n  }\n\n  const invalid = () => {\n    post.content = post.content.replace(/\\[(\\/?)event\\]/g, '[$1event-invalid]');\n    return data;\n  };\n\n  if (!event) {\n    return invalid();\n  }\n\n  const [failed, failures] = validateEvent(event);\n  if (failed) {\n    const obj = failures.reduce((val, failure) => ({\n      ...val,\n      [failure]: event[failure],\n    }), {});\n    winston.verbose(`[plugin-calendar] Event (pid:${post.pid}) validation failed: `, obj);\n    return invalid();\n  }\n\n  const main = post.isMain || data.data.isMain || await isMainPost(post);\n  if (!main && await getSetting('mainPostOnly')) {\n    return invalid();\n  }\n\n  const can = await canPostEvent(post.tid, post.uid);\n  if (!can) {\n    return invalid();\n  }\n\n  event.name = validator.escape(event.name);\n  event.location = event.location.trim();\n  event.description = event.description.trim();\n  event.pid = post.pid;\n  event.uid = post.uid;\n  event = await fireHook('filter:plugin-calendar.event.post', event);\n\n  if (event) {\n    await saveEvent(event);\n    winston.verbose(`[plugin-calendar] Event (pid:${event.pid}) saved`);\n  }\n\n  return data;\n};\n\nconst postSaveCallback = (data, cb) => postSave(data).asCallback(cb);\n\nexport { postSave, postSaveCallback };\n"]}