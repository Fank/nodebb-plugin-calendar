{"version":3,"sources":["../../src/lib/parseFilters.js"],"names":["eventRX","RegExp","invalidRX","parseRaw","content","input","replace","event","name","escape","eventText","text","parsePost","data","postData","parsePostCallback","cb","asCallback","parseRawCallback"],"mappings":";;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;AAEA,MAAMA,UAAU,IAAIC,MAAJ,CAAW,wBAAY,OAAZ,EAAqB,WAArB,CAAX,CAAhB;AACA,MAAMC,YAAY,IAAID,MAAJ,CAAY,IAAG,wBAAY,eAAZ,EAA6B,WAA7B,CAA0C,GAAzD,CAAlB;;AAEA,MAAME;AAAA,sCAAW,WAAOC,OAAP,EAAmB;AAClC,UAAMC,QAAQD,QAAQE,OAAR,CACZ,2CADY,EAEZ,sCAFY,CAAd;AAIA,UAAMC,QAAQ,qBAAMF,KAAN,CAAd;AACA,QAAI,CAACE,KAAL,EAAY;AACV,aAAOF,MAAMC,OAAN,CAAcJ,SAAd,EAAyB,4BAAzB,CAAP;AACD;AACDK,UAAMC,IAAN,GAAa,oBAAUC,MAAV,CAAiBF,MAAMC,IAAvB,CAAb;;AAEA,UAAME,YAAY,8BAAc,EAAEH,YAAF,EAAd,CAAlB;AACA,UAAMI,OAAON,MAAMC,OAAN,CAAcN,OAAd,EAAuBU,SAAvB,CAAb;AACA,WAAOC,IAAP;AACD,GAdK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAgBA,MAAMC;AAAA,uCAAY,WAAOC,IAAP,EAAgB;AAChC,UAAMC,WAAWD,KAAKC,QAAtB;AACAA,aAASV,OAAT,GAAmB,MAAMD,SAASW,SAASV,OAAlB,CAAzB;;AAEA,WAAOS,IAAP;AACD,GALK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAOA,MAAME,oBAAoB,CAACD,QAAD,EAAWE,EAAX,KAAkBJ,UAAUE,QAAV,EAAoBG,UAApB,CAA+BD,EAA/B,CAA5C;AACA,MAAME,mBAAmB,CAACd,OAAD,EAAUY,EAAV,KAAiBb,SAASC,OAAT,EAAkBa,UAAlB,CAA6BD,EAA7B,CAA1C;;QAESD,iB,GAAAA,iB;QAAmBH,S,GAAAA,S;QAAWM,gB,GAAAA,gB;QAAkBf,Q,GAAAA,Q","file":"parseFilters.js","sourcesContent":["import validator from 'validator';\nimport { eventTemplate } from './templates';\nimport parse, { tagTemplate } from './parse';\n\nconst eventRX = new RegExp(tagTemplate('event', '[\\\\s\\\\S]*'));\nconst invalidRX = new RegExp(`(${tagTemplate('event-invalid', '[\\\\s\\\\S]*')})`);\n\nconst parseRaw = async (content) => {\n  const input = content.replace(\n    /\\[description\\]([\\s\\S]*)\\[\\/description\\]/,\n    '[description]<p>$1</p>[/description]'\n  );\n  const event = parse(input);\n  if (!event) {\n    return input.replace(invalidRX, '<div class=\"hide\">$1</div>');\n  }\n  event.name = validator.escape(event.name);\n\n  const eventText = eventTemplate({ event });\n  const text = input.replace(eventRX, eventText);\n  return text;\n};\n\nconst parsePost = async (data) => {\n  const postData = data.postData;\n  postData.content = await parseRaw(postData.content);\n\n  return data;\n};\n\nconst parsePostCallback = (postData, cb) => parsePost(postData).asCallback(cb);\nconst parseRawCallback = (content, cb) => parseRaw(content).asCallback(cb);\n\nexport { parsePostCallback, parsePost, parseRawCallback, parseRaw };\n"]}