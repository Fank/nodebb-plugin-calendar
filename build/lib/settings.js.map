{"version":3,"sources":["../../src/lib/settings.js"],"names":["db","require","main","p","promisify","getObject","getObjectField","setObject","convert","checkingInterval","x","parseInt","checkingICalInterval","respondIfCanReply","mainPostOnly","getSettings","setSettings","settings","getSetting","key","value","Error"],"mappings":";;;;;;;;;;;;;AAEA,MAAMA,KAAKC,QAAQC,IAAR,CAAaD,OAAb,CAAqB,gBAArB,CAAX;;AAEA,MAAME,IAAI,mBAAQC,SAAlB;AACA,MAAMC,YAAYF,EAAEH,GAAGK,SAAL,CAAlB;AACA,MAAMC,iBAAiBH,EAAEH,GAAGM,cAAL,CAAvB;AACA,MAAMC,YAAYJ,EAAEH,GAAGO,SAAL,CAAlB;;AAEA,MAAMC,UAAU;AACdC,oBAAkBC,KAAKC,SAASD,CAAT,EAAY,EAAZ,KAAmB,OAAO,EAAP,GAAY,CADxC;AAEdE,wBAAsBF,KAAKC,SAASD,CAAT,EAAY,EAAZ,KAAmB,KAAK,EAFrC;AAGdG,qBAAmBH,KAAKA,MAAM,IAAN,IAAcA,MAAM,MAH9B;AAIdI,gBAAcJ,KAAKA,MAAM,IAAN,IAAcA,MAAM;AAJzB,CAAhB;;AAOA,MAAMK;AAAA,sCAAc,aAAY;AAAA,gBACsD,OAAMV,UAAU,0BAAV,CAAN,KAA+C,EADrG;;AAAA,UACtBI,gBADsB,SACtBA,gBADsB;AAAA,UACJG,oBADI,SACJA,oBADI;AAAA,UACkBC,iBADlB,SACkBA,iBADlB;AAAA,UACqCC,YADrC,SACqCA,YADrC;;AAE9B,WAAO;AACLL,wBAAkBD,QAAQC,gBAAR,CAAyBA,gBAAzB,CADb;AAELG,4BAAsBJ,QAAQI,oBAAR,CAA6BA,oBAA7B,CAFjB;AAGLC,yBAAmBL,QAAQK,iBAAR,CAA0BA,iBAA1B,CAHd;AAILC,oBAAcN,QAAQM,YAAR,CAAqBA,YAArB;AAJT,KAAP;AAMD,GARK;;AAAA;AAAA;AAAA;AAAA,IAAN;;AAUA,MAAME,cAAcC,YAAYV,UAAU,0BAAV,EAAsCU,QAAtC,CAAhC;;AAEA,MAAMC;AAAA,uCAAa,WAAOC,GAAP,EAAe;AAChC,UAAMC,QAAQ,MAAMd,eAAe,0BAAf,EAA2Ca,GAA3C,CAApB;AACA,QAAI,CAACX,QAAQW,GAAR,CAAL,EAAmB;AACjB,YAAME,MAAM,cAAN,CAAN;AACD;AACD,WAAOb,QAAQW,GAAR,EAAaC,KAAb,CAAP;AACD,GANK;;AAAA;AAAA;AAAA;AAAA,IAAN;;QASEL,W,GAAAA,W;QACAG,U,GAAAA,U;QACAF,W,GAAAA,W","file":"settings.js","sourcesContent":["import Promise from 'bluebird';\n\nconst db = require.main.require('./src/database');\n\nconst p = Promise.promisify;\nconst getObject = p(db.getObject);\nconst getObjectField = p(db.getObjectField);\nconst setObject = p(db.setObject);\n\nconst convert = {\n  checkingInterval: x => parseInt(x, 10) || 1000 * 60 * 5,\n  checkingICalInterval: x => parseInt(x, 10) || 60 * 24,\n  respondIfCanReply: x => x === true || x === 'true',\n  mainPostOnly: x => x === true || x === 'true',\n};\n\nconst getSettings = async () => {\n  const { checkingInterval, checkingICalInterval, respondIfCanReply, mainPostOnly } = await getObject('plugin-calendar:settings') || {};\n  return {\n    checkingInterval: convert.checkingInterval(checkingInterval),\n    checkingICalInterval: convert.checkingICalInterval(checkingICalInterval),\n    respondIfCanReply: convert.respondIfCanReply(respondIfCanReply),\n    mainPostOnly: convert.mainPostOnly(mainPostOnly),\n  };\n};\n\nconst setSettings = settings => setObject('plugin-calendar:settings', settings);\n\nconst getSetting = async (key) => {\n  const value = await getObjectField('plugin-calendar:settings', key);\n  if (!convert[key]) {\n    throw Error('invalid-data');\n  }\n  return convert[key](value);\n};\n\nexport {\n  getSettings,\n  getSetting,\n  setSettings,\n};\n"]}